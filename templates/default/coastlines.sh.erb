#!/bin/bash

function package_coast
{
  slug=$1
  top=$2
  left=$3
  bottom=$4
  right=$5

  ogr2ogr -spat ${left} ${bottom} ${right} ${top} -t_srs EPSG:4326 coast/${slug}.water_coast.shp data/water-polygons-split-4326/water_polygons.shp

  # if our size is > 4 we have a coastline. Package it, then generate the inverse land polygons
  # for the extract as well
  size=$(du -sk coast/${slug}.water_coast.shp | awk '{print $1}')
  if [ ${size} -gt 4 ]; then
    ogr2ogr -spat ${left} ${bottom} ${right} ${top} -t_srs EPSG:4326 coast/${slug}.land_coast.shp data/land-polygons-split-4326/land_polygons.shp

    zip -j - coast/${slug}.water_coast.??? > coast/${slug}.water.coastline.zip
    zip -j - coast/${slug}.land_coast.??? > coast/${slug}.land.coastline.zip
  else
    echo "Size not > 4, skipping ${slug}.water"
  fi

  rm coast/${slug}.land_coast.*
  rm coast/${slug}.water_coast.*
}
export -f package_coast

<% require 'json' -%>
<% data = JSON.parse(node[:mapzen_odes][:json]) -%>

declare -a coast_cmd=(
<% data['cities'].each do |city, val| -%>
  <% if node[:mapzen_odes][city][:coastlines] == true -%>
    "package_coast <%= city %> <%= val['bbox']['left'] %> <%= val['bbox']['bottom'] %> <%= val['bbox']['right'] %> <%= val['bbox']['top'] %>"
  <% end -%>
<% end -%>
)

parallel --jobs <%= node[:mapzen_odes][:coastlines][:jobs] %> --joblog <%= node[:mapzen_odes][:setup][:basedir] %>/logs/parallel_coastlines.log ::: "${coast_cmd[@]}" ><%= node[:mapzen_odes][:setup][:basedir] %>/logs/osm2pgsql_coastlines.log 2>&1

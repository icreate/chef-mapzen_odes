#!/bin/bash

<% require 'json' -%>
<% data = JSON.parse(node[:mapzen_odes][:json]) -%>

PGPASSWORD=<%= node[:mapzen_odes][:postgres][:password] %>
OSMOPTS="--hstore --host <%= node[:mapzen_odes][:postgres][:host] %> --database <%= node[:mapzen_odes][:postgres][:db] %> --username <%= node[:mapzen_odes][:postgres][:user] %>"
PGSQLOPTS="-h <%= node[:mapzen_odes][:postgres][:host] %> -d <%= node[:mapzen_odes][:postgres][:db] %> -U <%= node[:mapzen_odes][:postgres][:user] %>"
PGSQL2SHPOPTS="-h <%= node[:mapzen_odes][:postgres][:host] %> -u <%= node[:mapzen_odes][:postgres][:user] %> -P <%= node[:mapzen_odes][:postgres][:password] %> <%= node[:mapzen_odes][:postgres][:db] %>"
SHAPE_ENCODING="UTF-8"
export PGPASSWORD OSMOPTS PGSQLOPTS PGSQL2SHPOPTS SHAPE_ENCODING

function osm2pgsql_shapefiles
{
  slug=$1
  geojson=$2 #true/false
  pre=${slug//-/_}
  prefix=`printf '%s\n' "${pre//[[:digit:]]/}" | tr '[:upper:]' '[:lower:]'`

  # generate shp files
  #
  osm2pgsql -sluc -C 2048 ${OSMOPTS} -S <%= node[:mapzen_odes][:setup][:scriptsdir] %>/osm2pgsql.style -p ${prefix} --number-processes 2 ex/${slug}.osm.pbf

  pgsql2shp -rk -f shp/${slug}_osm_point.shp    ${PGSQL2SHPOPTS} ${prefix}_point
  pgsql2shp -rk -f shp/${slug}_osm_polygon.shp  ${PGSQL2SHPOPTS} ${prefix}_polygon
  pgsql2shp -rk -f shp/${slug}_osm_line.shp     ${PGSQL2SHPOPTS} ${prefix}_line

  # generate geojson from shp files
  #
  if [ ${geojson} == 'true' ]; then
    ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs epsg:4326 shp/${slug}_osm_line.geojson shp/${slug}_osm_line.shp
    ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs epsg:4326 shp/${slug}_osm_point.geojson shp/${slug}_osm_point.shp
    ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs epsg:4326 shp/${slug}_osm_polygon.geojson shp/${slug}_osm_polygon.shp

    zip -j shp/${slug}.osm2pgsql-geojson.zip shp/${slug}_osm_*.geojson
  fi

  # zip up our output
  #
  zip -j shp/${slug}.osm2pgsql-shapefiles.zip shp/${slug}_osm_*.shp shp/${slug}_osm_*.prj shp/${slug}_osm_*.dbf shp/${slug}_osm_*.shx

  # remove source files
  #
  rm shp/${slug}_osm_*.*

  # clean up the db
  #
  echo "DROP TABLE \"${prefix}_line\""    | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_nodes\""   | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_point\""   | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_polygon\"" | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_rels\""    | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_roads\""   | psql ${PGSQLOPTS}
  echo "DROP TABLE \"${prefix}_ways\""    | psql ${PGSQLOPTS}
}
export -f osm2pgsql_shapefiles

function imposm_shapefiles
{
  slug=$1
  pre=${slug//-/_}
  prefix=`printf '%s\n' "${pre//[[:digit:]]/}" | tr '[:upper:]' '[:lower:]'`
  tmpdir=shp/${slug}-imposm

  mkdir ${tmpdir}

  imposm3 import -mapping <%= node[:mapzen_odes][:setup][:scriptsdir] %>/mapping.json -read ex/${slug}.osm.pbf -cachedir ${tmpdir} -srid 4326 -write -connection postgis://<%= node[:mapzen_odes][:postgres][:user] %>:<%= node[:mapzen_odes][:postgres][:password] %>@<%= node[:mapzen_odes][:postgres][:host] %>/<%= node[:mapzen_odes][:postgres][:db] %>?prefix=${prefix}_ -deployproduction

  declare -a arr=('admin' 'aeroways' 'amenities' 'buildings' 'landusages' 'landusages_gen0' 'landusages_gen1' 'places' 'roads' 'roads_gen0' 'roads_gen1' 'transport_areas' 'transport_points' 'waterareas' 'waterareas_gen0' 'waterareas_gen1' 'waterways')

  # shps
  for i in ${arr[@]}; do
    pgsql2shp -rk -f ${tmpdir}/${slug}_osm_${i}.shp ${PGSQL2SHPOPTS} ${prefix}_${i}
  done
  zip -j shp/${slug}.imposm-shapefiles.zip ${tmpdir}/${slug}_osm_*.shp ${tmpdir}/${slug}_osm_*.prj ${tmpdir}/${slug}_osm_*.dbf ${tmpdir}/${slug}_osm_*.shx

  <% data['cities'].keys.each do |city| -%>
    <% if node[:mapzen_odes][city][:imposm_geojson] == true %>
      for i in ${arr[@]}; do
        ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -s_srs epsg:4326 -t_srs epsg:4236 ${tmpdir}/${slug}_${i}.geojson ${tmpdir}/${slug}_osm_${i}.shp
      done
      zip -j shp/${slug}.imposm-geojson.zip ${tmpdir}/${slug}_*.geojson
    <% end %>
  <% end -%>

  rm -r ${tmpdir}

  for i in ${arr[@]}; do
    echo "DROP TABLE \"${prefix}_${i}\" CASCADE" | psql ${PGSQLOPTS}
  done
}
export -f imposm_shapefiles

declare -a osm2pgsql_cities=(
<% data['cities'].keys.each do |city| -%>
  <% if node[:mapzen_odes][city][:osm2pgsql_shapes] == true -%>
    <% if node[:mapzen_odes][city][:osm2pgsql_geojson] == true -%>
      <%= city %> true
    <% else %>
      <%= city %> false
  <% end -%>
<% end -%>
)

declare -a imposm_cities=(
<% data['cities'].keys.each do |city| -%>
  <% if node[:mapzen_odes][city][:imposm_shapes] == true -%>
    <%= city %>
  <% end -%>
<% end -%>
)

parallel --jobs <%= node[:mapzen_odes][:shapes][:osm2pgsql_jobs] %> --joblog <%= node[:mapzen_odes][:setup][:basedir] %>/logs/parallel_osm2pgsql_shapefiles.log osm2pgsql_shapefiles ::: "${osm2pgsql_cities[@]}" ><%= node[:mapzen_odes][:setup][:basedir] %>/logs/osm2pgsql_shapefiles.log 2>&1

parallel --jobs <%= node[:mapzen_odes][:shapes][:imposm_jobs] %> --joblog <%= node[:mapzen_odes][:setup][:basedir] %>/logs/parallel_imposm_shapefiles.log imposm_shapefiles ::: "${imposm_cities[@]}" ><%= node[:mapzen_odes][:setup][:basedir] %>/logs/imposm_shapefiles.log 2>&1

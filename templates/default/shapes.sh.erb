#!/bin/bash
#
PGPASSWORD=<%= node[:mapzen_odes][:postgres][:password] %>
OSMOPTS="--hstore --host <%= node[:mapzen_odes][:postgres][:host] %> --database <%= node[:mapzen_odes][:postgres][:db] %> --username <%= node[:mapzen_odes][:postgres][:user] %>"
PGSQLOPTS="-h <%= node[:mapzen_odes][:postgres][:host] %> -d <%= node[:mapzen_odes][:postgres][:db] %> -U <%= node[:mapzen_odes][:postgres][:user] %>"
PGSQL2SHPOPTS="-h <%= node[:mapzen_odes][:postgres][:host] %> -u <%= node[:mapzen_odes][:postgres][:user] %> -P <%= node[:mapzen_odes][:postgres][:password] %> <%= node[:mapzen_odes][:postgres][:db] %>"
SHAPE_ENCODING="UTF-8"
export PGPASSWORD OSMOPTS PGSQLOPTS PGSQL2SHPOPTS SHAPE_ENCODING

function osm2pgsql_shapefiles
{
  slug=$1
  prefix=${slug//-/_}_osm

  # generate shp files
  #
  osm2pgsql -sluc -C 2048 ${OSMOPTS} -S <%= node[:mapzen_odes][:setup][:scriptsdir] %>/osm2pgsql.style -p ${prefix} --number-processes 2 ex/$slug.osm.pbf

  pgsql2shp -rk -f shp/${slug}.osm-point.shp    ${PGSQL2SHPOPTS} ${prefix}_point  
  pgsql2shp -rk -f shp/${slug}.osm-polygon.shp  ${PGSQL2SHPOPTS} ${prefix}_polygon
  pgsql2shp -rk -f shp/${slug}.osm-line.shp     ${PGSQL2SHPOPTS} ${prefix}_line   

  # generate geojson from shp files
  #
<% if node[:mapzen_odes][:process][:osm2pgsql_geojson] == true %>
  ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs crs:84 shp/${slug}.osm-line.geojson shp/${slug}.osm-line.shp      
  ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs crs:84 shp/${slug}.osm-point.geojson shp/${slug}.osm-point.shp    
  ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -t_srs crs:84 shp/${slug}.osm-polygon.geojson shp/${slug}.osm-polygon.shp

  zip -j shp/$slug.osm2pgsql-geojson.zip shp/$slug.osm-*.geojson
<% end %>

  # zip up our output
  #
  zip -j shp/${slug}.osm2pgsql-shapefiles.zip shp/${slug}.osm-*.shp shp/${slug}.osm-*.prj shp/${slug}.osm-*.dbf shp/${slug}.osm-*.shx

  # remove source files
  #
  rm shp/${slug}.osm-*.*

  # clean up the db
  #
  echo "DROP TABLE ${prefix}_line"    | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_nodes"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_point"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_polygon" | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_rels"    | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_roads"   | psql ${PGSQLOPTS}
  echo "DROP TABLE ${prefix}_ways"    | psql ${PGSQLOPTS}
}
export -f osm2pgsql_shapefiles

function imposm_shapefiles
{
  slug=$1
  prefix=${slug//-/_}

  mkdir shp/$slug-imposm

  imposm3 import -mapping <%= node[:mapzen_odes][:setup][:scriptsdir] %>/mapping.json -read ex/${slug}.osm.pbf -cachedir shp/${slug}-imposm -srid 4326 -write -connection postgis://<%= node[:mapzen_odes][:postgres][:user] %>:<%= node[:mapzen_odes][:postgres][:password] %>@<%= node[:mapzen_odes][:postgres][:host] %>/<%= node[:mapzen_odes][:postgres][:db] %>?prefix=${prefix}_ -deployproduction

  declare -a arr=('admin' 'aeroways' 'amenities' 'buildings' 'landusages' 'landusages_gen0' 'landusages_gen1' 'places' 'roads' 'roads_gen0' 'roads_gen1' 'transport_areas' 'transport_points' 'waterareas' 'waterareas_gen0' 'waterareas_gen1' 'waterways')

  # shps
  for i in ${arr[@]}; do
    pgsql2shp -rk -f shp/${slug}-imposm/${slug}.osm-${i}.shp ${PGSQL2SHPOPTS} ${prefix}_${i}
  done
  zip -j shp/${slug}.imposm-shapefiles.zip shp/${slug}-imposm/${slug}.osm-*.shp shp/${slug}-imposm/${slug}.osm-*.prj shp/${slug}-imposm/${slug}.osm-*.dbf shp/${slug}-imposm/${slug}.osm-*.shx

<% if node[:mapzen_odes][:process][:imposm_geojson] == true %>
  for i in ${arr[@]}; do
    ogr2ogr -lco ENCODING="UTF-8" -f GeoJSON -s_srs epsg:4326 -t_srs crs:84 shp/${slug}-imposm/${slug}-${i}.geojson shp/${slug}-imposm/${slug}.osm-${i}.shp
  done
  zip -j shp/${slug}.imposm-geojson.zip shp/${slug}-imposm/${slug}-*.geojson
<% end %>

  rm -r shp/${slug}-imposm

  for i in ${arr[@]}; do
    echo "DROP TABLE ${prefix}_${i} CASCADE" | psql ${PGSQLOPTS}
  done
}
export -f imposm_shapefiles

declare -a cities=(
<% require 'json' -%>
<% json = File.read("#{node[:mapzen_odes][:setup][:scriptsdir]}/cities.json") -%>
<% data = JSON.parse(json) %>
<% data['cities'].keys.each do |city| -%>
'<%= city %>'
<% end -%>
)

<% if node[:mapzen_odes][:process][:osm2pgsql_shapes] == true %>
parallel --jobs <%= node[:mapzen_odes][:shapes][:osm2pgsql_jobs] %> --joblog <%= node[:mapzen_odes][:setup][:basedir] %>/logs/parallel_osm2pgsql_shapefiles.log osm2pgsql_shapefiles ::: "${cities[@]}" ><%= node[:mapzen_odes][:setup][:basedir] %>/logs/osm2pgsql_shapefiles.log 2>&1
<% end %>

<% if node[:mapzen_odes][:process][:imposm_shapes] == true %>
parallel --jobs <%= node[:mapzen_odes][:shapes][:imposm_jobs] %> --joblog <%= node[:mapzen_odes][:setup][:basedir] %>/logs/parallel_imposm_shapefiles.log imposm_shapefiles ::: "${cities[@]}" ><%= node[:mapzen_odes][:setup][:basedir] %>/logs/imposm_shapefiles.log 2>&1
<% end %>
